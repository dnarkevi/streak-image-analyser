# Creative Commons Attribution (CC-BY) 4.0 2023 Domantas Narkeviƒçius. Some rights reserved.
#
# For help or bug reports, please contact me via Github: https://github.com/dnarkevi/
#
# This program can be used or modified in any way you want, but
# it goes under the terms of the Creative Commons Attribution 4.0, 
# which means you must reference the author. See https://creativecommons.org/licenses
# for more information.

icon = b''
homscreen_img = b''
import os
import traceback
import threading
from time import sleep, perf_counter
import numpy as np
from numpy.polynomial import Polynomial
from scipy import optimize, signal, interpolate
import PySimpleGUI as sg
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
from matplotlib.widgets import SpanSelector
from matplotlib.colors import Normalize
matplotlib.use("TkAgg")
sg.theme("Gray Gray Gray")

global_error = []

def gray_tabs(is_gray = True):
    """Disbales out of focus tabs or enables all tabs if all operations are completed."""
    keys = []
    for c in range(tab_count):
        if str(c) != global_values['-TABS-'][-1] and c in threads:
            keys.append('-TAB-' + str(c))
    keys += ['-CLOSE_FILE-', '-LOAD_FILES-']
    if is_gray:
        for key in keys:
            window[key].update(disabled = True)
    else:
        calcs_running = []
        sleep(2)
        for c in range(tab_count):
            calcs_running.append(event_trig[c].is_set())
        if not any(calcs_running):
            for key in keys:
                window[key].update(disabled = False)
            window['-HOME-'].update(disabled = True)
            window['-HOME-'].update(disabled = False)
                
def totry(func, *keys, **kwargs):
    """Compact error checking for other functions."""
    try:
        func(*keys, **kwargs)
    except:
        pass

def ars(arr, decimals = 2):
    """Rounds numpy.ndarray and changes its dtype to str."""
    if type(arr) == list and type(arr[0]) == np.ndarray: 
        arr = np.column_stack(arr)
    return arr.round(decimals).astype(str)

def ueven(val):
    """Returns odd number if it is even."""
    if val % 2 == 0:
        return val - 1 
    else:
        return val

def find_nearest(array, value):
    """Finds the closest element index to the given value in the array."""
    array = np.asarray(array)
    idx = (np.abs(array - value)).argmin()
    return idx

def func_mono(x, param, pk):
    w, s, b, t1, a1 = param
    c1 = a1*np.exp(-x/t1)
    exc = gauss(x, pk, w, s)
    return signal.fftconvolve(c1, exc) + b

def func_di(x, param, pk):
    w, s, b, t1, a1, t2, a2  = param
    c1 = a1*np.exp(-x/t1)
    c2 = a2*np.exp(-x/t2)
    exc = gauss(x, pk, w, s)
    return signal.fftconvolve(c1 + c2, exc) + b

def func_tri(x, param, pk):
    w, s, b, t1, a1, t2, a2, t3, a3 = param
    c1 = a1*np.exp(-x/t1)
    c2 = a2*np.exp(-x/t2)
    c3 = a3*np.exp(-x/t3)
    exc = gauss(x, pk, w, s)
    return signal.fftconvolve(c1 + c2 + c3, exc) + b

def gauss(x, peak, sigma, mu):
    """To one normalised gauss function."""
    vals = np.exp(-np.power(x - mu, 2)/(2*np.power(sigma, 2)))
    return peak * vals/max(vals)

class Toolbar(NavigationToolbar2Tk):
    """Displays only selected interactive elements."""
    toolitems = [NavigationToolbar2Tk.toolitems[c] for c in [0, 4, 5]]
    def set_message(self, msg):
        pass
#     #Vertical direction.
#     def _Button(self, text, image_file, toggle, command):
#         b = super()._Button(text, image_file, toggle, command)
#         b.pack(side=tk.TOP) # re-pack button in vertical direction
#         return b

class Toolbar_w_msg(NavigationToolbar2Tk):
    """Displays only selected interactive elements and coordinates."""
    toolitems = [NavigationToolbar2Tk.toolitems[c] for c in [0, 4, 5]]

def backbone_layout(num):
    N = str(num)
    first_quarter = [
        [
            sg.T("Original Image size: "), sg.T(k = N + '-PIX-')
        ],
        [
            sg.T("Cut frames from:"), sg.In(s = (6, None), k = N + '-IN_FRAME1-'),
            sg.T("To:"), sg.In(s = (6, None), p = (5, 0), k = N + '-IN_FRAME2-'),
        ],
        [
            sg.T("Number of frames to combine per stack: "), sg.In(k = N + '-IN_COUNT-')
        ],
        [
            sg.T("Total count of partly merged images: "), sg.T(k = N + '-TOTCOUNT-')
        ],
        [
            sg.Checkbox("Jitter corr.", k = N + '-JITT_CORR-'),
            sg.Checkbox("Curve corr.", k = N + '-CURV_CORR-'),
            sg.Button("Update", p = (5, 5), k = N + '-UPDATE-'),
            sg.T(s = (10, None), k = N + '-CORR_MSG-')
        ],
        [
            sg.HSeparator(p = (0, 0))
        ],
        [
            sg.Radio("Original image:", N + "show", enable_events = True, k = N + '-RS1-'),
            sg.Radio("Image w/ jitter correction:", N + "show", enable_events = True, k = N + '-RS2-')
        ],
        [
            sg.Canvas(size = (1.5*100, 100), k = N + '-CANVAS1-')
        ]
    ]
#%% canvas2
    second_quarter = [
        [
            sg.Column([[sg.Radio("Vertical ROI:", N + "ROI_sel", enable_events = True, k = N + '-RR1-')],
                      [sg.Radio("Horizontal ROI:", N + "ROI_sel", enable_events = True, k = N + '-RR2-')]]),
            sg.Column([[sg.Checkbox("All", enable_events = True, k = N + '-CA1-')],
                      [sg.Checkbox("All", enable_events = True, k = N + '-CA2-')]]),
            sg.Canvas(size = (113, 40), p = (20, 0), k = N + '-CANVAS2BAR-')   
        ],
        [
            sg.Canvas(size = (1.5*247, 246), k = N + '-CANVAS2-'),
            sg.Column([[sg.Column([[sg.T("LUT")],
                                   [sg.Slider((-2, 0), resolution = 0.1, disable_number_display = True, p = ((2, 0), 0),
                                              enable_events = True, k = N + '-LUT-')]], p = (10, 0))]])
        ],
        [
            sg.In(enable_events = True, visible = False, k = N + '-EXP_IMG-'),
            sg.FileSaveAs("Export Image", file_types = (('TXT file', '*.txt'), ('ALL Files', '*.*')), p = (5, 5)),
            sg.T('', (15, None), justification = 'right', p = ((0, 5), 0), k = N + '-CUT-'),
            sg.Button("Plot", p = (5, 5), k = N + '-PLOT-')
            
        ]
    ]

    third_quarter = [
        [
            sg.Checkbox("Normalize", enable_events = True, k = N + '-NORM_SPE-'),
            sg.Combo('', s = (14, None), readonly = True,  k = N + '-SEL_SPE-'),
            sg.Button("Delete", enable_events = True, p = (5, 5), k = N + '-DEL_SPE-'),
            sg.Canvas(size = (113, 40), k = N + '-CANVAS3BAR-')
        ],
        [
            sg.Checkbox("Divide by pixels", enable_events = True, k = N + '-PIX_SPE-')
        ],
        [
            sg.Canvas(size = (1.5*247, 246), k = N + '-CANVAS3-')
        ],
        [
            sg.In(enable_events = True, visible = False, k = N + '-EXP_SPE-'),
            sg.FileSaveAs("Export All", file_types = (('TXT file', '*.txt'), ('ALL Files', '*.*')), p = (5, 5))       
        ]
    ]

    fourth_quarter = [
        [
            sg.Checkbox("Normalize", enable_events = True, k = N + '-NORM_DEC-'),
            sg.Combo('', s = (14, None), readonly = True, k = N + '-SEL_DEC-'),
            sg.Button("Delete", enable_events = True, p = (5, 5), k = N + '-DEL_DEC-'),
            sg.Canvas(size = (113, 40), k = N + '-CANVAS4BAR-')
        ],
        [
            sg.Checkbox("Log scale", enable_events = True, k = N + '-LOG_DEC-'),
            sg.T("Add (+/-):", p = ((10, 0), 0)),
            sg.In(p = (5, 0), k = N + '-Y_MOD-'),
            sg.T("Shift by:"),
            sg.In(p = (5, 0), k = N + '-X_MOD-'),
            sg.Button("Apply", k = N + '-DO_MOD-')
        ],
        [
            sg.Canvas(size = (1.5*247, 246), k = N + '-CANVAS4-')
        ],
        [
            sg.In(enable_events = True, visible = False, k = N + '-EXP_DEC-'),
            sg.FileSaveAs("Export All", file_types = (('TXT file', '*.txt'), ('ALL Files', '*.*')), p = (5, 5)),
            sg.Button("Send to Fit", enable_events = True, p = (5, 5), k = N + '-TO_FIT-')
            
        ]
    ]

    first_column = [
        [
            sg.Column(first_quarter, vertical_alignment = 'top'),
            sg.VSeparator(p = (5, 2)),
            sg.Column(second_quarter, vertical_alignment = 'top')
        ],
        [
            sg.HSeparator(p = (0, (2, 5)))
        ],
        [
            sg.Column(third_quarter, vertical_alignment = 'top'),
            sg.VSeparator(p = ((10, 5), 2)),
            sg.Column(fourth_quarter, vertical_alignment = 'top')
        ]
    ]

    initial_column = [
        [
            sg.T("Initial parameters:")
        ],
        [
            sg.T("(Select checkbox to fix the value)")
        ],
        [
            sg.Column([[sg.T("Pulse width")], 
                       [sg.T("Pulse position")], 
                       [sg.T("Background")]]),
            sg.Column([[sg.In(k = N + '-IN_W-'),
                        sg.Checkbox('', p = (2, 0), k = N + '-FIX_W-')],
                       [sg.In(k = N + '-IN_S-'),
                        sg.Checkbox('', p = (2, 0), k = N + '-FIX_S-')],
                       [sg.In(k = N + '-IN_B-'),
                        sg.Checkbox('', p = (2, 0), k = N + '-FIX_B-')]])
        ],
        [
            sg.T("œÑ\N{SUBSCRIPT ONE} =", font = "Times", p = (2, 0)), sg.In(k = N + '-IN_T1-'),
            sg.Checkbox('', k = N + '-FIX_T1-'),
            sg.T("A\N{SUBSCRIPT ONE} =", font = "Times", p = (2, 0)), sg.In(k = N + '-IN_A1-'),
            sg.Checkbox('', k = N + '-FIX_A1-')
        ],
        [
            sg.T("œÑ\N{SUBSCRIPT TWO} =", font = "Times", p = (2, 0)), sg.In(k = N + '-IN_T2-'),
            sg.Checkbox('', k = N + '-FIX_T2-'),
            sg.T("A\N{SUBSCRIPT TWO} =", font = "Times", p = (2, 0)), sg.In(k = N + '-IN_A2-'),
            sg.Checkbox('', k = N + '-FIX_A2-')
        ],
        [
            sg.T("œÑ\N{SUBSCRIPT THREE} =", font = "Times", p = (2, 0)), sg.In(k = N + '-IN_T3-'),
            sg.Checkbox('', k = N + '-FIX_T3-'),
            sg.T("A\N{SUBSCRIPT THREE} =", font = "Times", p = (2, 0)), sg.In(k = N + '-IN_A3-'),
            sg.Checkbox('', k = N + '-FIX_A3-')
        ] 
    ]

    result_column = [
        [
            sg.T("Result:")
        ],
        [
            sg.T("œá\N{SUPERSCRIPT TWO} =", font = "Times"), sg.T(k = N + '-OUT_CHI-')
        ],
        [
            sg.Column([[sg.T("Pulse width")], 
                       [sg.T("Pulse position")], 
                       [sg.T("Background")]]),
            sg.Column([[sg.T(k = N + '-OUT_W-')],
                       [sg.T(k = N + '-OUT_S-')],
                       [sg.T(k = N + '-OUT_B-')]])
        ],
        [
            sg.Column([[sg.T("œÑ\N{SUBSCRIPT ONE} =", font = "Times"), sg.T(s = (7, None), k = N + '-OUT_T1-')], 
                       [sg.T("œÑ\N{SUBSCRIPT TWO} =", font = "Times"), sg.T(s = (7, None), k = N + '-OUT_T2-')], 
                       [sg.T("œÑ\N{SUBSCRIPT THREE} =", font = "Times"), sg.T(s = (7, None), k = N + '-OUT_T3-')]]),
            sg.Column([[sg.T("A\N{SUBSCRIPT ONE} =", font = "Times"), sg.T(s = (7, None), k = N + '-OUT_A1-')],
                       [sg.T("A\N{SUBSCRIPT TWO} =", font = "Times"), sg.T(s = (7, None), k = N + '-OUT_A2-')],
                       [sg.T("A\N{SUBSCRIPT THREE} =", font = "Times"), sg.T(s = (7, None), k = N + '-OUT_A3-')]]),
            sg.Column([[sg.T("A\N{SUBSCRIPT ONE}/Œ£A =", font = "Times"), sg.T(s = (7, None), k = N + '-OUT_A1%-')],
                       [sg.T("A\N{SUBSCRIPT TWO}/Œ£A =", font = "Times"), sg.T(s = (7, None), k = N + '-OUT_A2%-')],
                       [sg.T("A\N{SUBSCRIPT THREE}/Œ£A =", font = "Times"), sg.T(s = (7, None), k = N + '-OUT_A3%-')]])
        ],
        [
            sg.Column([[sg.T("œÑ\N{LATIN SUBSCRIPT SMALL LETTER a} =", font = "Times 15"),
                        sg.T(s = (7, None), font = "Calibri 12", k = N + '-OUT_TA-')],
                       [sg.T("œÑ\N{LATIN SUBSCRIPT SMALL LETTER I} =", font = "Times 15"),
                        sg.T(s = (7, None), font = "Calibri 12", k = N + '-OUT_TI-')]])
        ]    
    ]

    second_column = [
        [
            sg.T("Cut time from:"), sg.In(k = N + '-IN_TIME1-'),
            sg.T("To:"), sg.In(p = (5, 0), k = N + '-IN_TIME2-'),
            sg.Canvas(size = (113, 40), p = (5, 0), k = N + '-CANVAS5BAR-')
        ],
        [
            sg.Canvas(size = (1.5*247, 246), k = N + '-CANVAS5-')
        ],
        [
            sg.Radio("Mono", N + "exp", enable_events = True, k = N + '-R1-'),
            sg.Radio("Di", N + "exp", enable_events = True, k = N + '-R2-'),
            sg.Radio("Tri", N + "exp", enable_events = True, k = N + '-R3-')
        ],
        [
            sg.Column(initial_column),
            sg.VSeparator(p = ((0, 4), 2)),
            sg.Column(result_column)
        ],
        [
            sg.Button("Fit!", p = (5, 5), k = N + '-FIT-'),
            sg.In(enable_events = True, visible = False, k = N + '-EXP_FIT-'),
            sg.FileSaveAs("Export Param", file_types = (('TXT file', '*.txt'), ('ALL Files', '*.*')), p = (5, 5))
        ],
        [
            sg.In(enable_events = True, visible = False, k = N + '-EXP_MASTER-'),
            sg.FolderBrowse("Master Export", p = (5, 5)) 
        ],
        [
            sg.T("Fit message:"),
            sg.T('', k = N + '-FIT_MSG-')
        ],
        [
            sg.T('', k = N + '-EXP_MSG-')
        ]
    ]

    layout = [
        [
            sg.Column(first_column),
            sg.VSeparator(p = ((10, 5), 2)),
            sg.Column(second_column)
        ]
    ]
    return layout

def backbone(num):
    """Local data analysis and corresponding tab manipulation.
    Window object widgets' keys are modified by using order identificator (num).
    """
    global global_values
    N = str(num)
    span1_x = span2_x = span1_y = span2_y = ''
    init_trig[num].wait()
    gray_tabs(True)
    
    def values(key):
        """Returns global value by order number local key."""
        return global_values[N + key]
    
    def bind(keys, append_key = '', enable = True):
        """(Un)Binds press "Enter" event to an elements (widgets)."""
        if enable:
            for key in keys:
                window[N + key].bind('<Return>', append_key)
        else:
            for key in keys:
                window[N + key].unbind('<Return>')
    
    def wincl(*keys, timeout = 0):
        """Clears PySimpleGUI widget."""
        sleep(timeout)
        if isinstance(keys[0], tuple):
            keys, = keys
        for key in keys:
            window[N + key].update('')

    def disable_elem(*keys, **kwargs):
        """Disbales PySimpleGUI widget. Transfers one argument."""
        if isinstance(keys[0], tuple):
            keys, = keys
        for key in keys:
            window[N + key].update(disabled = True, **kwargs)
             
    def enable_elem(*keys, **kwargs):
        """Enables PySimpleGUI widget. Transfers one argument."""
        if isinstance(keys[0], tuple):
            keys, = keys
        for key in keys:
            window[N + key].update(disabled = False, **kwargs)
        
    def prep_input(key, min_val = -np.inf, max_val = np.inf, integer = False, update = True):
        """Reads input value from PySimpleGUI widget.
        Converts to number if possible. 
        Bounds limit return value.
        Input widget is updated by default.
        """
        if integer:
            try: val = int(float(values(key)))
            except: val = 0        
        else:
            try: val = float(values(key))
            except: val = 0
        if val < min_val: val = min_val
        if val > max_val: val = max_val   
        if update:
            window[N + key].update(val)
        return val
    
    class Fig:
        """Responsible for plot manipulation in window."""
        def __init__(self, size, key, toolbar_key = None, msg = False, row = 1, **kwargs):
            """Creates matplotlib figure and axes. Draws them into canvas widget."""
            DPI = 65
            fig = Figure(dpi = DPI, figsize = (size*1.5/DPI, size/DPI), facecolor = '#F0F0F0', constrained_layout = True)
            if row == 1: #Axes names are managed by the row count.
                self.ax = fig.subplots()
            else: 
                axes = fig.subplots(row, 1, **kwargs)
                for c in range(row): 
                    setattr(self, 'ax' + str(c+1), axes[c])
            self.fig = fig
            self.figure_canvas_agg = FigureCanvasTkAgg(fig, window[N + key].TKCanvas)
            self.figure_canvas_agg.draw()
            if toolbar_key is not None and not msg:
                self.tb = Toolbar(self.figure_canvas_agg, window[N + toolbar_key].TKCanvas)
                self.tb.update()
            elif toolbar_key is not None and msg:
                self.tb = Toolbar_w_msg(self.figure_canvas_agg, window[N + toolbar_key].TKCanvas)
                self.tb.update()
            self.figure_canvas_agg.get_tk_widget().pack(side = 'right', fill = 'both', expand = 1)
        def clp(self):
            """Clears lines, scatter, ledend and toolbar zoom memory. Keeps figure and axes."""
            if hasattr(self, 'tb'): self.tb.update()
            for ax_attr in self.__dict__.keys():
                if ax_attr != 'fig':
                    axes = getattr(self, ax_attr)
                    axes.lines.clear()
                    axes.collections.clear()
                    axes.legend('')
                    axes.get_legend().remove()
                else:
                    break
            self.fig.canvas.draw()
        def disp(self, *args, **kwargs):
            """Creates image and draws it."""
            if hasattr(self, 'image'): self.image.remove()
            self.image = self.ax.imshow(*args, **kwargs)
            self.fig.canvas.draw()
        def span(self, do_span = False, vert = True):
            """Enables/disables span selector widget."""
            if do_span and vert:
                self.SpSc = SpanSelector(self.ax, vertical_callback, 'vertical', useblit = True)
            elif do_span and not vert:
                self.SpSc = SpanSelector(self.ax, horizontal_callback, 'horizontal', useblit = True)
            elif not do_span and hasattr(self, 'SpSc'):
                delattr(self, 'SpSc')
        def delete(self):
            if hasattr(self, 'tb'):
                self.tb.forget()
            self.figure_canvas_agg.get_tk_widget().forget()
            plt.close(self.fig)
    
    def horizontal_callback(x1, x2):
        """Used by span seletor. Returns values to global. Updates text widgets."""
        nonlocal span1_x, span2_x
        span1_x, span2_x = sorted([x1, x2])
        window[N + '-CUT-'].update("%.1f - %.1fnm" % (span1_x, span2_x))
        enable_elem('-PLOT-')

    def vertical_callback(y1, y2):
        """Used by span seletor. Returns values to global. Updates text widgets."""
        nonlocal span1_y, span2_y
        span1_y, span2_y = sorted([y1, y2])
        window[N + '-CUT-'].update("%.1f - %.1f" % (span1_y, span2_y) + time_unit)
        enable_elem('-PLOT-')
        
    try:
        wincl(msgKeys + firstOutKeys + secondOutKeys)
        disable_elem(buttonKeys)
        
        for key in ('-SEL_SPE-', '-SEL_DEC-'):
            window[N + key].update(value = '', values = [])
        
        for key, val in allElementGroups.items():
            window[N + key].update(value = val[0], disabled = val[1])
        
        for key in forcedValuesKeys:
            global_values[N + key] = allElementGroups[key][0]
            
        bind(secondInputGroup.keys(), enable = False)
        bind(thirdInputGroup.keys(), enable = False)
        bind(firstInputGroup.keys(), enable = False)
            
        fig1 = Fig(200, '-CANVAS1-')
        fig1.ax.set(xlabel = "Wavelength", ylabel = "Time")
    
        fig2 = Fig(250, '-CANVAS2-', '-CANVAS2BAR-', msg = True)
        fig2.ax.set(xlabel = "Wavelength", ylabel = "Time", title = "Final Image. Select area to analyse.")
    
        fig3 = Fig(250, '-CANVAS3-', '-CANVAS3BAR-')
        fig3.ax.set(xlabel = "Wavelength", xmargin = 0, ylabel = "Counts", title = "Intensity spectra")
    
        fig4 = Fig(250, '-CANVAS4-', '-CANVAS4BAR-')
        fig4.ax.set(xlabel = "Time", xmargin = 0, ylabel = "Counts", title = "Decays", yscale = 'log')
    
        fig5 = Fig(250, '-CANVAS5-', '-CANVAS5BAR-', row = 2, gridspec_kw = {'height_ratios': [3, 1]})
        fig5.ax1.set(ylabel = "Counts", yscale = 'log')
        fig5.ax2.set(xlabel = "Time" , ylabel = "Residual")
        
        if num < max(num_NewThread):
            init_trig[num_NewThread[num_NewThread.index(num) + 1]].set()
        else:
            for c in num_NewThread:
                event_trig[c].set()
        
        #%% Internal event loop
        while True:
            event_trig[num].wait()
            if global_event == sg.WIN_CLOSED or global_event == '-CLOSE_FILE-':
                break
            
            event = global_event[1:]
            #Identifying Tkinter event triggger.
            event = event.split('-¬¢')[-1]
            gray_tabs(True)

            
            #if type(event) == str: 
                
                
            if global_event == '-OPEN_FILES-':
                try:
                    #Opening and reading main data.
                    file = files[num]
                    loc = np.fromfile(file, np.uint16)[1:4] ; loc[0] += 64 #Reads data starting location and image size in pixels.
                    raw = np.roll(np.fromfile(file, np.uint16, offset = loc[0]), 2) #Reads all measurment data.
                    delimiter = 2*np.where(np.fromfile(file, np.int32, offset = loc[0]) == -1)[0] + 2 #Reads location of each image.
                    delimiter = np.insert(delimiter, 0, 0) #Taking into account new delimiter starting point.
                    del_loc = np.tile(delimiter, [4, 1]) #Creates repeated delimiter values.
                    for c in range(1, 4): 
                        del_loc[c] += c #Makes values increase in y-axis.
                    del_loc = del_loc.flatten('F') 
                    raw = np.delete(raw, del_loc[:-4]) #Deletes delimiter and time stamp values, leaving only coordinates.
                    delimiter -= np.arange(0, len(delimiter)*4, 4) #New indexes for each image.
                    tot_fr = len(delimiter) - 1
                    
                    #Reads calibration data.
                    cal = np.fromfile(file, np.float32, offset = loc[0] - (loc[1] + loc[2])*4)[:loc[1] + loc[2]]
                    xcal = np.flip(cal[:loc[1]]) #Flips to make axis more intuitive.
                    xbd = [min(xcal), max(xcal)] #bd <-> bounds
                    ycal = cal[loc[1]:]
                    
                    #Finds time unit of measurement.
                    file_bin = open(file, 'br')
                    file_bin.seek(64) #Location of metadata.
                    mdata = file_bin.read(loc[0] - (loc[1] + loc[2])*4 - 64).decode('ascii') #Reads all metadata.
                    mdata = mdata.replace('=', ',').split(',') 
                    time_unit = mdata[mdata.index('ScalingYUnit') + 1].replace('"', '')
                    
                    #Creating empty lists for spectra data.
                    all_spe = [] ; spe_names = [] ; spe_pix = []
                    
                    window[N + '-PIX-'].update(str(loc[1]) + "x" + str(loc[2]) + "x" + str(tot_fr))
                    window[N + '-IN_FRAME1-'].update(0)
                    window[N + '-IN_FRAME2-'].update(tot_fr)
                    global_values[N + '-IN_FRAME2-'] = tot_fr
                    enable_elem('-UPDATE-')
                    bind(firstInputGroup.keys(), N + '-¬¢-UPDATE-')
                    event = '-UPDATE-'
                except ValueError: 
                    if files[num] != '':
                        window[N + '-CORR_MSG-'].update("File format is wrong.")
                except FileNotFoundError:
                    pass
                
            if event == '-UPDATE-':
                window[N + '-CORR_MSG-'].update('Computing...')
                fr_2 = prep_input('-IN_FRAME2-', 1, tot_fr, True)
                fr_1 = prep_input('-IN_FRAME1-', 0, fr_2 - 1, True)
                count = prep_input('-IN_COUNT-', 1, fr_2 - fr_1, True)
                tot_img = int((fr_2 - fr_1)/count)
                #Initialising array of photons for analysis.
                try: 
                    data = np.zeros((tot_img, loc[2], loc[1]), np.float32)
                except MemoryError:
                    window[N + '-CORR_MSG-'].update('Not enough memory.')
                    event = ''
        #%%shift
            if event == '-UPDATE-':
                #Creates data array of photon count.
                for i in range(tot_img):
                    a = raw[delimiter[i*count + fr_1]:delimiter[(i+1)*count + fr_1]] #All photon crdinates.
                    np.add.at(data[i], (a[1::2], a[::2]), 1) #Adds photons by coordinates.
                a = raw[delimiter[(i+1)*count + fr_1]:fr_2] #Residual photons.
                np.add.at(data[i], (a[1::2], a[::2]), 1)
                data = np.flip(data, 2) #Flips for more intuitive displaying.
                
                #Calibration data is non-linear. Interpolation is used to make even spacing.
                ylin = np.linspace(min(ycal), max(ycal), loc[2], dtype = np.float32)
                for c in range(tot_img):
                    data[c] = interpolate.interp1d(ycal, data[c], axis = 0)(ylin)
                nocorr_img = np.sum(data, 0)
                ncor_ybd = [ylin[-1], ylin[0]]
            
                #Shifting algorithm for creating uniform zero point (removing jitter).
                if values('-JITT_CORR-'):
                    data_xsum = np.sum(data, 2)
                    maxloc = np.argmax(data_xsum, 1)
                    data_max = np.max(data_xsum, 1)
                    data_min = np.empty(tot_img)
                    for c in range(tot_img):
                        data_min[c] = np.min(data_xsum[c, :maxloc[c]]) 
                    shift = np.argmax(data_xsum > np.vstack(data_max - data_min)*0.5, 1)
                    if tot_img > 4:
                        shift = signal.savgol_filter(shift, ueven(tot_img), 3) #Smoothing.
                    shift -= min(shift)
                    shift = shift.astype(int)
                    for c in range(tot_img): 
                        data[c] = np.roll(data[c], -shift[c], 0)
                    enable_elem('-RS2-')
                else:
                    shift = [0]
                    window[N + '-RS2-'].update(False, disabled = True)
                    window[N + '-RS1-'].update(True)
                
                #Updataing data properties.
                xlen = loc[1]
                ylen = loc[2] - max(shift)
                data = np.sum(data[:, :ylen], 0)
                jittcorr_img = np.copy(data)
                jitt_ybd = [ylin[ylen - 1], ylin[0]]
                
                #Shifting algorithm for removing curved zero points.
                if values('-CURV_CORR-'):
                    smooth_data = signal.savgol_filter(data - np.min(data, 0), 101, 7)
                    shift_arg, = np.where(np.any(8 < smooth_data, 0))#Finding where intensity is enough for correction.
                    maxloc = np.argmax(data, 0)
                    maxloc[np.where(maxloc == 0)[0]] = 1
                    data_max = np.max(data, 0)
                    data_min = np.empty(xlen)
                    for c in range(xlen):
                        data_min[c] = np.min(data[:maxloc[c]])
                    shift = np.argmax(signal.savgol_filter(data, 51, 5) > (data_max - data_min)*0.5, 0)
                    #Fitting the curve with shift arguments where photon count is enough.
                    if shift_arg.size > 8:
                        shift_par = Polynomial.fit(shift_arg, shift[shift_arg], deg = 3).convert().coef
                        shift = Polynomial(shift_par)(np.arange(xlen))
                    shift -= min(shift)
                    shift = shift.astype(int)
                    for c in range(xlen):
                        data[:, c] = np.roll(data[:, c], -shift[c], 0)
                else:
                    shift = [0]
    
                #Updataing data properties.
                if 2*max(shift) < ylen:
                    ylen -= max(shift)
                ylin = ylin[:ylen]
                img = data[:ylen]
                ybd = [ylin[-1], ylin[0]]
                
                #Resetting decay spectrum plot.
                all_dec = [] ; dec_names = [] ; dec_shift = []
                window[N + '-SEL_DEC-'].update(value = '', values = [])
                fig4.clp()
                fig5.clp()
    
                disable_elem('-NORM_DEC-', '-DEL_DEC-', '-LOG_DEC-', '-DO_MOD-', '-TO_FIT-', '-FIT-')
                enable_elem('-RS1-', '-RR1-', '-RR2-', '-CA1-', '-CA2-', '-LUT-')
                wincl(firstOutKeys + secondOutKeys)
                window[N + '-IN_TIME2-'].update(10000)
                window[N + '-TOTCOUNT-'].update(tot_img)
                wincl('-CORR_MSG-')
                bind(secondInputGroup.keys(), enable = False)
                bind(thirdInputGroup.keys(), enable = False)
            
            if event in {'-RS1-', '-RS2-', '-UPDATE-'}:
                if values('-RS1-'):
                    fig1.disp(nocorr_img, extent = xbd + ncor_ybd, aspect='auto')
                if values('-RS2-'):
                    fig1.disp(jittcorr_img, extent = xbd + jitt_ybd, aspect='auto')
                fig2.ax.autoscale(True)
                fig2.tb.update()
                fig2.disp(img, extent = xbd + ybd,
                          aspect='auto', norm = Normalize(None, 10**values('-LUT-') * np.max(img)))
        #%%plot          
            if event == '-LUT-':
                global lut_time
                lut_time = perf_counter() 
                #Increases image update resolution while changing lut values.
                while lut_time + 0.5 > perf_counter():
                    sleep(1e-4)
                    fig2.ax.autoscale(False)
                    fig2.disp(img, extent = xbd + ybd, aspect='auto',
                              norm = Normalize(None, 10**global_values[N + '-LUT-'] * np.max(img)))
                if global_event == sg.WIN_CLOSED:
                    break
    
            if event in {'-RR1-', '-RR2-', '-UPDATE-', '-CA1-', '-CA2-'}:
                #Allows to select region of interest.
                if values('-RR1-'):
                    fig2.span(True, False)
                    enable_elem('-CA1-')
                    disable_elem('-CA2-', value = False)
                    wincl('-CUT-')
                    disable_elem('-PLOT-', text = "Plot decay")
                if values('-RR2-'):
                    fig2.span(True, True)
                    enable_elem('-CA2-')
                    disable_elem('-CA1-', value = False)
                    wincl('-CUT-')
                    disable_elem('-PLOT-', text = "Plot spectrum")
                if values('-RR1-') and values('-CA1-'):
                    fig2.span(False)
                    span1_x = min(xcal)
                    span2_x = max(xcal)
                    window[N + '-CUT-'].update("%.1f - %.1fnm" %(span1_x, span2_x))
                    enable_elem('-PLOT-')
                if values('-RR2-') and values('-CA2-'):
                    fig2.span(False)
                    span1_y = ybd[1]
                    span2_y = ybd[0]
                    window[N + '-CUT-'].update("%.1f - %.1f" %(span1_y, span2_y) + time_unit)
                    enable_elem('-PLOT-')
                    
            if event == '-PLOT-':
                #ROI image is processed to displayable data.
                if values('-RR1-'):
                    x_cut1 = find_nearest(xcal, span1_x)
                    x_cut2 = find_nearest(xcal, span2_x) + 1
                    all_dec.append(np.sum(img[:, x_cut1:x_cut2], 1).round())
                    dec_names.append("%.1f - %.1fnm" %(span1_x, span2_x))
                    dec_shift.append(0)
                    window[N + '-SEL_DEC-'].update(values = dec_names, value = dec_names[-1])
                    enable_elem('-NORM_DEC-', '-DEL_DEC-', '-LOG_DEC-', '-DO_MOD-', '-TO_FIT-')
                    bind(secondInputGroup.keys(), N + '-¬¢-DO_MOD-')
                if values('-RR2-'):
                    y_cut1 = find_nearest(ylin, span1_y)
                    y_cut2 = find_nearest(ylin, span2_y) + 1
                    all_spe.append(np.sum(img[y_cut1:y_cut2], 0, np.float64))
                    spe_names.append("%.1f - %.1fps" %(span1_y, span2_y))
                    spe_pix.append(y_cut2 - y_cut1)
                    window[N + '-SEL_SPE-'].update(values = spe_names, value = spe_names[-1])
                    enable_elem('-NORM_SPE-', '-DEL_SPE-', '-PIX_SPE-')
            
            if event == '-DEL_SPE-':
                spe_idx = spe_names.index(values('-SEL_SPE-'))
                del all_spe[spe_idx] ; del spe_names[spe_idx] ; del spe_pix[spe_idx]
                if spe_names == []: 
                    window[N + '-SEL_SPE-'].update(value = '', values = [])
                    disable_elem('-NORM_SPE-', '-DEL_SPE-', '-PIX_SPE-')
                else:
                    window[N + '-SEL_SPE-'].update(values = spe_names, value = spe_names[-1])
                    
            if event == '-DEL_DEC-':
                dec_idx = dec_names.index(values('-SEL_DEC-'))
                del all_dec[dec_idx] ; del dec_names[dec_idx] ; del dec_shift[dec_idx]
                if dec_names == []: 
                    window[N + '-SEL_DEC-'].update(value = '', values = [])
                    disable_elem('-NORM_DEC-', '-DEL_DEC-', '-LOG_DEC-', '-DO_MOD-', '-TO_FIT-')
                    bind(secondInputGroup.keys(), enable = False)
                else:
                    window[N + '-SEL_DEC-'].update(values = dec_names, value = dec_names[-1])
                    
            if (event == '-PLOT-' and values('-RR2-')) or event in {'-DEL_SPE-', '-NORM_SPE-', '-PIX_SPE-'}:
                fin_spe = []
                fig3.clp()
                #Spectra is modified, appended to list for export and drawn.
                if all_spe != []:
                    for c in range(len(all_spe)):
                        temp_spe = np.copy(all_spe[c])
                        if values('-NORM_SPE-'):
                            temp_spe /= max(temp_spe)
                        if values('-PIX_SPE-'):
                            temp_spe /= spe_pix[c]
                        fin_spe.append(temp_spe)
                        fig3.ax.plot(xcal, fin_spe[c], label = spe_names[c], c = plt.cm.tab10(c))
                    fig3.ax.relim()
                    fig3.ax.autoscale(True)
                    fig3.ax.legend(loc = "upper right")
                fig3.fig.canvas.draw()
    
            if event == '-LOG_DEC-':
                if values('-LOG_DEC-'):
                    fig4.ax.set(yscale = 'log')
                else:
                    fig4.ax.set(yscale = 'linear')
                    
            if event == '-DO_MOD-':
                #Linear transformations.
                dec_idx = dec_names.index(values('-SEL_DEC-'))
                dec_shift[dec_idx] += prep_input('-X_MOD-')
                all_dec[dec_idx] += prep_input('-Y_MOD-')
                    
            if (event == '-PLOT-' and values('-RR1-')) or event in {'-DEL_DEC-', '-NORM_DEC-', '-DO_MOD-', '-LOG_DEC-'}:
                fin_dec = []
                fig4.clp()
                #Decay is modified, appended to list for export and drawn.
                if all_dec != []:
                    for c in range(len(all_dec)):
                        temp_dec = np.copy(all_dec[c])
                        if values('-NORM_DEC-'):
                            temp_dec /= np.max(temp_dec)
                            temp_dec *= np.max(all_dec)
                        fin_dec.append(temp_dec)
                        fig4.ax.plot(ylin + dec_shift[c], fin_dec[c], label = dec_names[c], c = plt.cm.tab10(c))
                    fig4.ax.relim()
                    fig4.ax.autoscale(True)
                    fig4.ax.legend(loc = "upper right")
                fig4.fig.canvas.draw()
        #%%tofit        
            if event in {'-R1-', '-R2-', '-R3-'}:
                if values('-R1-'):
                    disable_elem('-IN_T2-', '-IN_A2-', '-FIX_T2-', '-FIX_A2-',
                            '-IN_T3-', '-IN_A3-', '-FIX_T3-', '-FIX_A3-')
                if values('-R2-'):
                    enable_elem('-IN_T2-', '-IN_A2-', '-FIX_T2-', '-FIX_A2-')
                    disable_elem('-IN_T3-', '-IN_A3-', '-FIX_T3-', '-FIX_A3-')
                if values('-R3-'):
                    enable_elem('-IN_T2-', '-IN_A2-', '-FIX_T2-', '-FIX_A2-',
                            '-IN_T3-', '-IN_A3-', '-FIX_T3-', '-FIX_A3-')    
    
            if event == '-TO_FIT-': 
                dec_idx = dec_names.index(values('-SEL_DEC-'))
                decay = fin_dec[dec_idx].astype(np.float64)
                decay[np.where(decay < 1)[0]] = 1 
                time = ylin.astype(np.float64) #Also makes a copy.
                
                fig5.clp()
                fig5.ax1.set(ylim = (0.9*min(decay), 1.1*max(decay)), xlim = np.flip(ybd))
                fig5.ax2.set(xlabel = "Time, " + time_unit, xlim = np.flip(ybd))  
                fig5.ax1.scatter(time, decay, label = dec_names[dec_idx], s = 1, color = 'blue')
                fig5.ax1.legend(loc = "upper right", markerscale = 0, handletextpad = -1)
                fig5.fig.canvas.draw()
    
                enable_elem('-FIT-')
                bind(thirdInputGroup.keys(), N + '-¬¢-FIT-')
                wincl(firstOutKeys + secondOutKeys)
                window[N + '-IN_TIME1-'].update("%.1f" %(ybd[-1]))
                window[N + '-IN_TIME2-'].update("%.1f" %(ybd[0]))
                
        #%%fit  
            if event == '-FIT-':
                #Prepares initial values and selects appropriate function for fitting.
                time_2 = prep_input('-IN_TIME2-', ylin[1], ylin[-1])
                tr_2 = find_nearest(ylin, time_2) + 1
                time_1 = prep_input('-IN_TIME1-', ylin[0], ylin[tr_2 - 1])
                tr_1 = find_nearest(ylin, time_1)
                window[N + '-IN_TIME1-'].update("%.1f" %(ylin[tr_1]))
                window[N + '-IN_TIME2-'].update("%.1f" %(ylin[tr_2 - 1]))
                
                if values('-R1-'):
                    func = func_mono
                    plen = 5
                elif values('-R2-'):
                    func = func_di
                    plen = 7
                else:
                    func = func_tri
                    plen = 9
                    
                pmin = [1e-3] + [-np.inf]*2 + [0]*(plen - 3)
                pmax = [np.inf]*plen
                
                res_keys = tuple(thirdInputGroup.keys())
                initial = [prep_input(res_keys[c], pmin[c]) for c in range(plen)]

                fix_keys = tuple(fitCheckboxGroup.keys())[:plen]
                for key in fix_keys:
                    if values(key):
                        f = fix_keys.index(key)
                        pmin[f] = initial[f] - np.finfo(np.float32).eps
                        pmax[f] = initial[f]
                        
                def residual(param):
                    """Calculates residuals for given decay and predetermined model function."""
                    return (func(time, param, max(decay))[tr_1:tr_2] - decay[tr_1:tr_2]) / decay[tr_1:tr_2]**0.5
    
                window[N + '-FIT_MSG-'].update('Calculating...')
                try:
                    res = optimize.least_squares(residual, x0 = initial, method = 'trf', bounds = (pmin, pmax))
                    window[N + '-FIT_MSG-'].update(res.message)
                except ValueError:
                    window[N + '-FIT_MSG-'].update('Some parameters are too extreme!') 
                    event = ''
                    
            if event == '-FIT-':
                #Sorting parameters by decay values, updating text/canvas elements, calculating results.
                wincl(firstOutKeys + secondOutKeys)
                
                decPar = np.reshape(res.x[3:], (-1, 2))
                decPar = decPar[decPar[:, 0].argsort()]
                parOut = np.concatenate((res.x[:3], decPar), None)
                chi = np.sum(res.fun**2)/(tr_2 - tr_1 - plen)
                tA = np.sum(decPar[:,1]*decPar[:,0]) / np.sum(decPar[:,1])
                tI = np.sum(decPar[:,1]*decPar[:,0]**2) / np.sum(decPar[:,1]*decPar[:,0])
                AFracs = decPar[:,1] / np.sum(decPar[:,1]) * 100
                resOut = np.concatenate((chi, tA, tI, AFracs), None)

                secondOutVals = np.concatenate((res.x[:3], resOut[:3]))
                for c in range(6):
                    window[N + secondOutKeys[c]].update("%.2f" %(secondOutVals[c]))
                for c in range(len(decPar)):
                    window[N + firstOutKeys[c*3]].update("%.2f" %(decPar[c,0]))
                    window[N + firstOutKeys[c*3+1]].update("%.2E" %(decPar[c,1]))
                    window[N + firstOutKeys[c*3+2]].update(str("%.2f" %(AFracs[c]))[:5]+"%")
                #Excitation function and decay fit.
                fig5.ax1.lines.clear()
                fig5.ax1.plot(time, gauss(time, max(decay), parOut[0], parOut[1]), color = 'orange') 
                fig5.ax1.plot(time[tr_1:tr_2], func(time, parOut, max(decay))[tr_1:tr_2], color = 'red')
                fig5.ax1.autoscale()
                fig5.ax1.set(xlim = np.flip(ybd), ylim = (0.9*min(decay), 1.1*max(decay)))
                #Residuals.
                fig5.ax2.lines.clear()
                fig5.ax2.plot(time[tr_1:tr_2], res.fun, color = 'green') 
                fig5.ax2.autoscale()
                fig5.ax2.relim()
                fig5.ax2.set(xlim = np.flip(ybd))
            
                fig5.tb.update()
                fig5.fig.canvas.draw()
        #%%exp   
            if event == '-EXP_MASTER-':
                for key in exportNames.keys():
                    path = values(event) + "/" + os.path.splitext(global_values['-OPEN_FILES-'])[0].split('/')[-1]
                    global_values[N + key] = path + exportNames[key] + ".txt"
            try:
                if event in {'-EXP_MASTER-', '-EXP_IMG-'}:
                    exp_x = np.insert(ars(xcal), 0 , "N/a")
                    exp_data = np.column_stack((ars(ylin), img))
                    np.savetxt(values('-EXP_IMG-'), np.vstack((exp_x, exp_data)), "%s", '\t')
            except FileNotFoundError:
                pass
            except (NameError, ValueError, IndexError):
                if event != '-EXP_MASTER-' and values(event) != '':
                    window[N + '-EXP_MSG-'].update("No image data to export!")
            try:
                if event in {'-EXP_MASTER-', '-EXP_SPE-'}:
                    exp_data = np.column_stack((ars(xcal), ars(fin_spe, 3)))
                    exp_data = np.vstack((['Wavelengh, nm'] + spe_names, exp_data))
                    np.savetxt(values('-EXP_SPE-'), exp_data, "%s", '\t')
            except FileNotFoundError:
                pass
            except (NameError, ValueError, IndexError):
                if event != '-EXP_MASTER-' and values(event) != '':
                    window[N + '-EXP_MSG-'].update("No spectrum data to export!")
            try:
                if event in {'-EXP_MASTER-', '-EXP_DEC-'}:
                    exp_data = []
                    exp_title = []
                    for c in range(len(all_dec)):
                        exp_data.append(ylin - dec_shift[c])
                        exp_data.append(all_dec[c])
                        exp_title.append('t, ' + time_unit)
                        exp_title.append(dec_names[c])
                    exp_data = np.vstack((exp_title, ars(exp_data, 0)))
                    np.savetxt(values('-EXP_DEC-'), exp_data, "%s", '\t')
            except FileNotFoundError:
                pass
            except (NameError, ValueError, IndexError):
                if event != '-EXP_MASTER-' and values(event) != '':
                    window[N + '-EXP_MSG-'].update("No decay data to export!")
            try:
                if event in {'-EXP_MASTER-', '-EXP_FIT-'}:
                    exp_data = np.column_stack((exportParNames1[:len(parOut)], parOut)) 
                    exp_data2 = np.column_stack((exportParNames2[:len(resOut)], resOut))
                    np.savetxt(values('-EXP_FIT-'), np.vstack((exp_data, exp_data2)), "%s", '\t')
            except FileNotFoundError:
                pass
            except (NameError, ValueError, IndexError):
                if event != '-EXP_MASTER-' and values(event) != '':
                    window[N + '-EXP_MSG-'].update("No fit data to export!")
            if event in {'-EXP_MASTER-', '-EXP_IMG-', '-EXP_SPE-', '-EXP_DEC-', '-EXP_FIT-'}:
                threading.Thread(target = lambda: totry(wincl, '-EXP_MSG-', timeout = 2)).start()
                
            wincl(tuple(exportNames.keys())) #Clearing previous input values.
            event_trig[num].clear()
            threading.Thread(target = lambda: gray_tabs(False)).start()
        
        event_trig[num].clear()
        for f in fig1, fig2, fig3, fig4, fig5:
            f.delete()      
        try: 
            file_bin.close()
        except: 
            pass
    except:
        if global_event == sg.WIN_CLOSED:
            pass
        else:
            global_error.append(traceback.format_exc())
            
           
#%%Initial
#Window initial values and key groups.
forcedValuesKeys = (
    '-IN_FRAME1-',
    '-IN_COUNT-',
    '-JITT_CORR-',
    '-CURV_CORR-',
    '-RS1-',
    '-RS2-',
    '-RR1-',
    '-RR2-',
    '-CA1-',
    '-CA2-',
    '-LUT-'
    )

msgKeys = (
    '-PIX-'     ,
    '-TOTCOUNT-',
    '-CORR_MSG-',
    '-FIT_MSG-' ,
    '-EXP_MSG-' ,
    )

firstOutKeys = (
    '-OUT_T1-'  ,
    '-OUT_A1-'  ,
    '-OUT_A1%-' ,
    '-OUT_T2-'  ,
    '-OUT_A2-'  ,
    '-OUT_A2%-' ,
    '-OUT_T3-'  ,
    '-OUT_A3-'  ,
    '-OUT_A3%-' 
    )

secondOutKeys = (
    '-OUT_W-'   ,
    '-OUT_S-'   ,
    '-OUT_B-'   ,
    '-OUT_CHI-' ,
    '-OUT_TA-'  ,
    '-OUT_TI-'  ,
    )

firstInputGroup = {
    '-IN_FRAME1-':  (0,     None),
    '-IN_FRAME2-':  ("1E6", None),
    '-IN_COUNT-':   (2000,  None)
    }

secondInputGroup = {
    '-Y_MOD-':      (0,     None),
    '-X_MOD-':      (0,     None)
    }

#firstOutKeys order must be the same as in thirdInputGroup.
thirdInputGroup = {
    '-IN_W-':       (1,     None),
    '-IN_S-':       (10,    None),
    '-IN_B-':       (0,     None),
    '-IN_T1-':      (10,    False),
    '-IN_A1-':      (1e-2,  False),
    '-IN_T2-':      (100,   False),
    '-IN_A2-':      (1e-2,  False),
    '-IN_T3-':      (400,   True),
    '-IN_A3-':      (1e-2,  True)
    }
    
miscellaneousGroup = {
    '-IN_TIME1-':   (0,     None),
    '-IN_TIME2-':   (10000, None),
    '-LUT-':        (0,     True),
    '-JITT_CORR-':  (True,  None),
    '-CURV_CORR-':  (True,  None),
    '-RS1-':        (False, True),
    '-RS2-':        (True,  True),
    '-RR1-':        (True,  True),
    '-RR2-':        (False, True),
    '-CA1-':        (False, True),
    '-CA2-':        (False, True),
    '-NORM_SPE-':   (False, True),
    '-PIX_SPE-':    (False, True),
    '-NORM_DEC-':   (False, True),
    '-LOG_DEC-':    (True,  True),
    '-R1-':         (False, None),
    '-R2-':         (True,  None),
    '-R3-':         (False, None)
    }
    
fitCheckboxGroup = {
    '-FIX_W-':      (False, None),
    '-FIX_S-':      (False, None),
    '-FIX_B-':      (False, None),
    '-FIX_T1-':     (False, False),
    '-FIX_A1-':     (False, False),
    '-FIX_T2-':     (False, False),
    '-FIX_A2-':     (False, False),
    '-FIX_T3-':     (False, True),
    '-FIX_A3-':     (False, True)
    }

allElementGroups = {
    **firstInputGroup,
    **secondInputGroup,
    **thirdInputGroup,
    **miscellaneousGroup,
    **fitCheckboxGroup
    }

buttonKeys = (
    '-UPDATE-'  ,
    '-PLOT-'    ,
    '-DEL_SPE-' ,
    '-DEL_DEC-' ,
    '-DO_MOD-'  ,
    '-TO_FIT-'  ,
    '-FIT-'     ,
    )

#Not used by window object. Just names for exporting.
exportNames = {
    '-EXP_IMG-':' image'   ,
    '-EXP_SPE-':' spectra'  ,
    '-EXP_DEC-':' decay' ,
    '-EXP_FIT-':' fit'     
    }

exportParNames1 = (
    "Width",
    "Position",
    "Background",
    "t1", "A1",
    "t2", "A2",
    "t3", "A3",
    )
    
exportParNames2 = (
    "Chi^2", "tA", "tI",
    "A1%", "A2%", "A3%"
    )

tab_count = 5
tabs = []
event_trig = []
init_trig = []
try:
    for c in range(tab_count):
        tabs.append([sg.Tab('', backbone_layout(c), disabled = True, k = '-TAB-' + str(c))])
        event_trig.append(threading.Event())
        init_trig.append(threading.Event())
    
    welcome_layout = [
        [sg.T("Welcome!", font = 'Any, 40', p = (40, (40, 0)))],
        [sg.T("to Streak camera image data analyser program v1.2", font = 'Any, 30', p = (40, 0))],
        [
         sg.Image(homscreen_img, p = (200, 100))
        ]
    ]
    
    welcome_tab = [[sg.Tab('Home', welcome_layout, k = '-HOME-')]]
    
    main_layout = [
        [
            sg.Column([
                       [sg.In(enable_events = True, visible = False, k = '-OPEN_FILES-'),
                       sg.FilesBrowse(button_text = "Load files", files_delimiter = '*',
                                      file_types = (('DPC image', '*.dpc'), ('ALL Files', '*.*')),
                                      p = (5, 5), k = '-LOAD_FILES-')],
                       [sg.Combo('', s = (7, None), readonly = True, p = (5, 5), k = '-SEL_FILE-')],
                       [sg.Button("Close file", p = (5, 5), disabled = True, k = '-CLOSE_FILE-')]
                      ], vertical_alignment = 'top'),
            sg.TabGroup(welcome_tab + tabs, key = '-TABS-')
        ]
    ]
    
    window = sg.Window("Streak camera image data analyser", main_layout, (5, None), size = (1363, 736),
                       element_padding = (0, 0), location = (0, 0), margins = (5, 5), finalize = True, icon = icon)
    
    #%%Event loop
    files = {c: None for c in range(tab_count)}
    file_names = {}
    threads = {}
    event_history = []
    while True:
        global_event, global_values = window.read()
        event_history.append(global_event)
        
        if global_event == sg.WIN_CLOSED:
            for e in event_trig:
                e.set()
            break
        
        if global_event == '-OPEN_FILES-':
            paths = global_values['-OPEN_FILES-'].split('*')
            num_NewThread = []
            k = 0
            for c in range(tab_count):
                if files[c] == None and k < len(paths):
                    file_name = paths[k].split('/')[-1][:-4]
                    if not file_name in file_names.keys():
                        files[c] = paths[k]
                        file_names[file_name] = c
                        window['-TAB-' + str(c)].update(file_name, disabled = False)
                        window['-CLOSE_FILE-'].update(disabled = False)
                        
                        thread = threading.Thread(target = backbone, args = [c])
                        threads[c] = thread
                        num_NewThread.append(c)  
                    k += 1
            tab_names = list(file_names.keys())
            window['-SEL_FILE-'].update(values = tab_names, value = tab_names[-1])
            
            if num_NewThread != []:
                init_trig[num_NewThread[0]].set()
                for c in num_NewThread:
                    threads[c].start()
                
        if global_event == '-CLOSE_FILE-':
            c = file_names[global_values['-SEL_FILE-']]
            files[c] = None
            event_trig[c].set()
            init_trig[c].clear()
            
            file_names.pop(global_values['-SEL_FILE-'], None)
            tab_names = list(file_names.keys())
            window['-TAB-' + str(c)].update('', disabled = True)
            if tab_names == []:
                window['-CLOSE_FILE-'].update(disabled = True)
                window['-SEL_FILE-'].update('', [])
            else:
                window['-SEL_FILE-'].update(tab_names[-1], tab_names)
            del threads[c]
        try:
            tab_num = int(global_event[0])
            event_trig[tab_num].set()
        except:
            pass
            
        lut_time = perf_counter()
except:
    try:
        window.close()
    except:
        pass
    global_error.append(traceback.format_exc())

if global_error != []:
    err = np.array(event_history + global_error)
    np.savetxt(os.path.abspath(os.getcwd()) + "\crash_log.txt", err, "%s", "\t")

#Clears all variables
#sys.modules[__name__].__dict__.clear()